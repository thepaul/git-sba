#!/usr/bin/env python
#
# git-sba

import sys
import os
from fnmatch import fnmatchcase
from subprocess import Popen, PIPE, CalledProcessError
import logging

def Popen_dbg(*args, **kwargs):
    logging.debug('Calling: %r with (%s)' %
                  (args, ' '.join(['%s=%r' % (k,v) for (k,v) in kwargs.items()])))
    p = Popen(*args, **kwargs)
    return p

def check_output(*args, **kwargs):
    kwargs['stdout'] = PIPE
    p = Popen_dbg(*args, **kwargs)
    logging.debug('command pid %d' % p.pid)
    out, err = p.communicate()
    code = p.wait()
    if code != 0:
        logging.debug('command pid %d failed, exit code %d' % (p.pid, code))
        raise CalledProcessError(code, args[0])
    logging.debug('command pid %d returned: %r' % (p.pid, out))
    return out

def git_call(cmd_args, *args, **kwargs):
    cmd = ['git'] + cmd_args
    return check_output(cmd, *args, **kwargs)

def git_branches():
    branchoutput = git_call(['branch', '--no-color', '-av'])
    return [b[2:].strip().split(None, 2) for b in branchoutput.splitlines()]

config_items = (
    'hide',
    'debug',
    'alwaysshow'
)

def git_config(item, default=''):
    try:
        val = git_call(['config', item])
    except CalledProcessError as e:
        if e.returncode == 1:
            return default
        raise
    return val

def git_sba_config():
    conf = {}
    for item in config_items:
        conf[item] = git_config('sba.%s' % item).strip()
    conf['hide'] = conf['hide'].split(';')
    return conf

def remove_hidden(hidelist, branches):
    result = []
    for bname in branches:
        if any(fnmatchcase(bname, patt) for patt in hidelist):
            continue
        result.append(bname)
    return result

def git_rev_parse(rev):
    return git_call(['rev-parse', '--no-flags', '--symbolic-full-name', rev]).splitlines()

def is_glob(patt):
    return '*' in patt or '?' in patt or '[' in patt

def expand_full_names(patt):
    if not patt:
        return []
    if is_glob(patt):
        patt = '--glob=' + patt
    return git_rev_parse(patt)

def get_branch_data_to_show(config):
    extras = config['alwaysshow'].split(';') \
           + list(config['args'])
    expanded_extras = reduce(lambda x,y:x+y, map(expand_full_names, extras), [])
    branchdata = git_call(['for-each-ref', '--python', '--format',
                           '(%(refname:short), %(upstream:short)),', 'refs/heads']
                          + expanded_extras)
    return eval('[%s]' % (branchdata,))

def determine_showlist(config, branches):
    locallist = []
    remotelist = []
    for local, tracked in branches:
        if local not in locallist:
            locallist.append(local)
        if tracked and tracked not in remotelist:
            remotelist.append(tracked)
    return remove_hidden(config['hide'], locallist + remotelist)

def showlist(config):
    branches = get_branch_data_to_show(config)
    return determine_showlist(config, branches)

def main(args):
    config = git_sba_config()
    config['args'] = args
    while args and args[0] == '-x':
       config['hide'].append(args[1])
       del args[:2]
    try:
        config['git_exec'] = os.path.join(os.environ['GIT_EXEC_PATH'], 'git')
    except KeyError:
        config['git_exec'] = 'git'
    if config['debug'].lower() in ('1', 'on', 'yes', 'true', 'y', 't'):
        logger = logging.getLogger()
        logger.setLevel(logging.DEBUG)
    config['git_pager'] = git_config('core.pager', 'less -FSRX')

    try:
        g = Popen_dbg(['git', 'show-branch', '--color=always'] + showlist(config), stdout=PIPE)
    except CalledProcessError as cpe:
        return cpe.returncode
    less = Popen(config['git_pager'], shell=True, stdin=g.stdout)
    less.wait()
    if g.poll() is None:
        g.terminate()
    return g.wait()

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
