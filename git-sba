#!/usr/bin/env python
#
# git-sba
#
# meant to be aliased as a git command, i.e.
#     sba = "!path/to/git-sba"
# in the [alias] section of .gitconfig.
#
# Delivers a view like "git show-branch -a", but differs in a couple ways:
#
#  1. only remote branches named the same as your local branches will be
#     shown. this can simplify the view when your main object is to compare
#     your local branches with relevant remote branches.
#
#  2. the results are shown with your git pager (unclear why git show-branch
#     doesn't already do this)
#
# A couple extra options in your git config can tune this behavior:
#
#     sba.hide:
#
#         This should be a semicolon-separated list of patterns naming local or
#         remote branches that you don't want to see in the sba output. For
#         example, I have a branch named "public" corresponding to public
#         releases which sometimes lags far behind my other branches, and I
#         normally don't care how it compares to them. I might set
#
#             $ git config sba.hide public
#
#         (as a repo-specific setting) so it didn't clutter up the listing too
#         much.
#
#         Patterns in the sba.hide list can contain shell-style wildcards
#         like *, ?, and [abc].
#
#     sba.alwaysshow
#
#         This should be a semicolon-separated list of patterns naming remote
#         branches that you always want to see in the sba output, even if there
#         are no corresponding local branches.
#
#         Patterns in the sba.alwaysshow list can contain shell-style wildcards
#         like *, ?, and [abc].

import sys
from fnmatch import fnmatchcase
from subprocess import Popen, PIPE

class CalledProcessError(Exception):
    pass

def check_output(*args, **kwargs):
    kwargs['stdout'] = PIPE
    p = Popen(*args, **kwargs)
    out, err = p.communicate()
    code = p.wait()
    if code != 0:
        raise CalledProcessError(code, args[0])
    return out

def git_call(cmd_args, *args, **kwargs):
    cmd = ['git'] + cmd_args
    return check_output(cmd, *args, **kwargs)

def git_branches():
    branchoutput = git_call(['branch', '--no-color', '-av'])
    return [b[2:].strip().split(None, 2) for b in branchoutput.splitlines()]

config_items = (
    'hide',
    'alwaysshow'
)

def git_config(item, default=''):
    try:
        val = git_call(['config', item])
    except CalledProcessError, e:
        if e.args[0] == 1:
            return default
        raise
    return val

def git_sba_config():
    conf = {}
    for item in config_items:
        conf[item] = git_config('sba.%s' % item).strip()
    return conf

def sort_branches(branches):
    remote = []
    local = []
    for bname, commit, desc in branches:
        (remote if bname.startswith('remotes/') else local).append((bname, commit, desc))
    return remote, local

def remove_hidden(hidelist, branches):
    hides = hidelist.split(';')

    result = []
    for bname, commit, desc in branches:
        if any(fnmatchcase(bname, patt) for patt in hides):
            continue
        result.append((bname, commit, desc))
    return result

def remove_links(branches):
    return [(b, c, d) for (b, c, d) in branches if c != '->']

def find_matching_remotes(config, local, remote):
    wanted_remotes = []
    remoteset = set()
    for bname, commit, desc in local:
        for rbname, rcommit, rdesc in remote:
            if fnmatchcase(rbname, 'remotes/*/%s' % bname):
                if rbname not in remoteset:
                    wanted_remotes.append((rbname, rcommit, rdesc))
                    remoteset.add(rbname)
    extra_list = config['alwaysshow'].split(';')
    for patt in extra_list:
        for rbname, rcommit, rdesc in remote:
            if rbname not in remoteset and fnmatchcase(rbname, patt):
                wanted_remotes.append((rbname, rcommit, rdesc))
                remoteset.add(rbname)
    return local + wanted_remotes

def determine_showlist(config, local, remote):
    local = remove_hidden(config['hide'], local)
    remote = remove_hidden(config['hide'], remote)
    local = remove_links(local)
    remote = remove_links(remote)
    showlist = local + find_matching_remotes(config, local, remote)
    return [b[0] for b in showlist]

def showlist():
    branches = git_branches()
    remote, local = sort_branches(branches)
    config = git_sba_config()
    return determine_showlist(config, local, remote)

def main(args):
    g = Popen(['git', 'show-branch', '--color=always'] + showlist(), stdout=PIPE)
    git_pager = git_config('core.pager', 'less -FSRX')
    less = Popen(git_pager, shell=True, stdin=g.stdout)
    g.wait()
    return less.wait()

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
